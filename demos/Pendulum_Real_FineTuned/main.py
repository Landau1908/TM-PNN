import numpy as np
import matplotlib.pyplot as plt

from nn import create_multioutput_TMPNN


def get_init28():#28
    W0=np.array([[0],
                 [0]]).T
    W1=np.array([[0.833329820419551, 0.0934362135973791],
                 [-3.27026747590827, 0.833329820419551]]).T
    W2=np.array([[0, 0, 0, 0],
                 [0, 0, 0, 0]]).T
    W3=np.array([[0.0255396432416664, 0.00246794141156563, 0, 0.000123434008677512, 0, 0, 0, 2.53522792756989E-06],
                 [0.458666629913265, 0.067978549117563, 0, 0.0046696838907351, 0, 0, 0, 0.000123434008677875]]).T

    return [W0, W1, W2, W3]


def get_init():#30
    W0=np.array([[0],
                 [0]]).T
    W1=np.array([[0.844142772185695, 0.0938011868696925],
                 [-3.06417210440996, 0.844142772185695]]).T
    W2=np.array([[0, 0, 0, 0],
                 [0, 0, 0, 0]]).T
    W3=np.array([[0.024014273880779, 0.00232447931853532, 0, 0.000116186875769242, 0, 0, 0, 2.38044680909688E-06],
                 [0.434762359662852, 0.0644519457587377, 0, 0.00441567484977804, 0, 0, 0, 0.000116186875769562]]).T

    return [W0, W1, W2, W3]


def load_data():
    a1 = [0.08620557367577884, 0.08211943387892871, 0.05344699228153171, 0.008196537749912587, -0.036868531821733455, -0.07393903765794034, -0.0780305438461546, -0.05754955068319047, -0.020488935736088294, 0.024585209369860053, 0.05754955068319047, 0.06984504991674083, 0.05731420910603989, 0.024585209369860053, -0.016391974308005267, -0.05344699228153171, -0.06984504991674083, -0.06165017063925903, -0.03290992437495586, 0.004098337709848645, 0.04096068353431557, 0.05731420910603989, 0.05731420910603989, 0.03277514440407577, 0.0, -0.036868531821733455, -0.06139814181249681, -0.06165017063925903, -0.04505146311597466, -0.012294462478152404, 0.020488935736088294, 0.049140734416020175, 0.053228361585901475, 0.03277514440407577, 0.004098337709848645, -0.02868065795522624, -0.05344699228153171, -0.05754955068319047, -0.04505146311597466, -0.016391974308005267, 0.016391974308005267, 0.04096068353431557, 0.04934263225296999, 0.04096068353431557, 0.016391974308005267, -0.016391974308005267, -0.04096068353431557, -0.053228361585901475, -0.04505146311597466, -0.024585209369860053]
    a2 = [-0.1691999719277866, -0.16043490761386603, -0.1025199685929875, -0.012294462478152404, 0.0780305438461546, 0.13958224392387875, 0.15171765164620354, 0.11065722117389563, 0.03277514440407577, -0.05344699228153171, -0.11926597995492808, -0.14828118145093316, -0.12384426936134098, -0.06165017063925903, 0.016391974308005267, 0.08620557367577884, 0.12740531553866388, 0.12283523887789499, 0.07393903765794034, 0.004098337709848645, -0.06984504991674083, -0.11519028169268408, -0.12333770089972394, -0.09065988720074511, -0.03290992437495586, 0.04112905637755206, 0.1025199685929875, 0.10659036605323881, 0.07771203514822662, 0.020488935736088294, -0.04505146311597466, -0.09436906900336348, -0.11111073588203237, -0.09065988720074511, -0.04112905637755206, 0.016459418834779648, 0.06574871572105602, 0.09436906900336348, 0.08620557367577884, 0.049140734416020175, -0.008196537749912587, -0.05731420910603989, -0.09028882970385999, -0.09028882970385999, -0.06165017063925903, -0.012345051844224488, 0.037020115873930025, 0.07393903765794034, 0.08211943387892871, 0.06165017063925903]
    a3 = [0.27269433654566755, 0.21423438514275892, 0.09028882970385999, -0.06165017063925903, -0.190143471033547, -0.25293869400617625, -0.23602367862589738, -0.14015388379570667, -0.008196537749912587, 0.12688663470777017, 0.21336864215180798, 0.2301576140493574, 0.16782784046180874, 0.053228361585901475, -0.0780305438461546, -0.18131977440149022, -0.2231133610549015, -0.19417495906864252, -0.1029406244548341, 0.016391974308005267, 0.12740531553866388, 0.19338595824191804, 0.19260326426862212, 0.12688663470777017, 0.020405330686538086, -0.09028882970385999, -0.1691999719277866, -0.19417495906864252, -0.15296241542323183, -0.06574871572105602, 0.04112905637755206, 0.12740531553866388, 0.17184201788553163, 0.13901521820165255, 0.0570807824062646, -0.0407936828678654, -0.12740531553866388, -0.16514867741462683, -0.15296241542323183, -0.09065988720074511, 0.0, 0.08211943387892871, 0.13958224392387875, 0.14767733704782568, 0.10615680151263622, 0.028563657838759995, -0.05731420910603989, -0.12333770089972394, -0.14421993079792642, -0.11975615113754916]
    return np.array(a1), np.array(a2), np.array(a3)


def main():
    a1, a2, a3 = load_data()
    X01 = np.array([a1[0], 0]).reshape(-1, 2)
    X02 = np.array([a2[0], -0.3]).reshape(-1, 2)
    X03 = np.array([a3[0], 0.1]).reshape(-1, 2)
    # X02 = np.array([a2[0], 0]).reshape(-1, 2)
    # X03 = np.array([a3[0], 0]).reshape(-1, 2)
    h = 0.1
    N = 50
    t = np.arange(0, N*h, h)

    tmpnn = create_multioutput_TMPNN(49, W=get_init())

    X1_train = np.zeros((N, 2))
    X1_train[:,0] = a1

    X3_train = np.zeros((N, 2))
    X3_train[:,0] = a3

    X1i = np.array(tmpnn.predict(X01))
    X1i = np.vstack((X01[np.newaxis, :], X1i))

    X2i = np.array(tmpnn.predict(X02))
    X2i = np.vstack((X02[np.newaxis, :], X2i))

    X3i = np.array(tmpnn.predict(X03))
    X3i = np.vstack((X03[np.newaxis, :], X3i))

    _, axs = plt.subplots(3,1,figsize=(15,10), sharex=True)

    # plot initialized ideal dynamics
    axs[0].set_prop_cycle(None)
    axs[0].plot(t, X1i[:, 0, 0], linestyle='-', label='initial TM-PNN φ(0)=0.09')
    axs[0].plot(t, X2i[:, 0, 0], linestyle='-', label='initial TM-PNN φ(0)=0.09')
    axs[0].plot(t, X3i[:, 0, 0], linestyle='-', label='initial TM-PNN φ(0)=0.09')
    axs[0].set_title("TM-PNN initialized from ODE of ideal pendulum")

    # plot fine-tuning from one sample
    tmpnn.fit(X01, [x.reshape(1,-1) for x in X1_train[1:]], epochs=800, verbose=1)

    X1 = np.array(tmpnn.predict(X01))
    X1 = np.vstack((X01[np.newaxis, :], X1))


    axs[1].plot(t, X1i[:, 0, 0], linestyle='-', label='initial TM-PNN φ(0)=0.09')
    axs[1].plot(t, a1, linestyle='-', alpha=0.7, label='Real data φ(0)=0.09, training')

    axs[1].set_prop_cycle(None)
    axs[1].plot(t, X1[:, 0, 0], marker='o', fillstyle='none', linestyle='none', label='fine-tuned TM-PNN φ(0)=0.09')
    axs[1].set_title("Fine-tuning of the TM-PNN")

    # plot predictions for unseen angles
    axs[2].plot(t, a1, linestyle='-', alpha=0.7, label='Real data φ(0)=0.09, training')
    axs[2].plot(t, a2, linestyle='--', alpha=0.7, label='Real data φ(0)=-0.17, unseen')
    axs[2].plot(t, a3, linestyle='--', alpha=0.7, label='Real data φ(0)=0.27, unseen')
    axs[2].set_title("TM-PNN for unseen angles")

    X2 = np.array(tmpnn.predict(X02))
    X2 = np.vstack((X02[np.newaxis, :], X2))

    X3 = np.array(tmpnn.predict(X03))
    X3 = np.vstack((X03[np.newaxis, :], X3))


    axs[2].set_prop_cycle(None)
    axs[2].plot(t, X1[:, 0, 0], linestyle='-', label='TM-PNN φ(0)=0.09, training')
    axs[2].plot(t, X2[:, 0, 0], linestyle='-', label='TM-PNN φ(0)=-0.17, unseen')
    axs[2].plot(t, X3[:, 0, 0], linestyle='-', label='TM-PNN φ(0)=0.27, unseen')


    for i in range(3):
        axs[i].grid()
        axs[i].set_ylabel('Angle φ, rad', fontsize=14)
        axs[i].tick_params(axis='both', which='major', labelsize=14)
        axs[i].legend()



    plt.show()

    return 0

if __name__ == "__main__":
    main()